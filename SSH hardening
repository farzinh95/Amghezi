SSH Hardening


open /etc/ssh/sshd.conf


#############################
####  change port      ######
#############################
port 22         #change it to whatever you want and open it on the firewall



this part is for red hat based


let's say 2255 for this note

allow it in selinux

sudo semanage port -a -t ssh_port_t -p tcp 2255

open the port on firewall 

sudo firewall-cmd --zone=public --add-port=2255/tcp --permanent
sudo firewall-cmd --reload


restart the service
sudo systemctl status sshd


--------------

#####################################
#### Disable unwanted stuff #########
#####################################

open /etc/ssh/sshd.conf

X11 Forwarding no
Allow TcpForwarding no
AllowStreamLocalForwarding no
GatewayPorts no
PermitTunnel no


-------------
#############################
####      Banner       ######
#############################

open /etc/ssh/sshd.conf

search for Banner

uncomment this line
#Banner none

change it to this
Banner /etc/ssh/banner.txt
save and exit

create the file and write what you want like

Authorized only!!! 

but make it like this put a empty line on top and bottom of whatever you wrote for banner

---------------


####################################
####     Automatic logout     ######
####################################

use this for every service not just for ssh
this is for when a service or whatever is idle for a specific amount of time log them out

create a file here

cd /etc/profile.d
vim logout.sh

right your bash script here

TMOUT=600
readonly TMOUT
export TMOUT


save the file and exit
this will auto log it out after 600 seconds

if you didnt want it anymore you just need to remove the file
----------------

######################################
#### Multi factor authentication ######
#######################################


linux 2fa/ mfa 

1.installing google authenticator
debian
sudo apt-get install libpam-google-authenticator


centos / RHEL
yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum install google-authenticator


2.Edit the configuration files
Edit /etc/pam.d/sshd

add this to the end of the file
# Google Authenticator
auth required pam_google_authenticator.so

Edit /etc/ssh/sshd_config and modify or add these directives:

ChallengeResponseAuthentication yes
UsePAM yes
PasswordAuthentication no

3. Activate the two-factor authentication for a user

google-authenticator
scan the code and write down the codes (secret key and emergency codes)

for questions
update your felan file         y
disallow mulitiple uses       y
new token generated         y
                                           y

write down the recovery codes

------------------------------


######################################
###      Mitigate DOS for ssh      ###
######################################

in /etc/ssh/sshd_config

MaxStartups 10:20:30

10: Number of unauthenticated connections before we start dropping
20: Percentage chance of dropping once we reach 10 (increases linearly for more than 10)
30: Maximum number of connections at which we start dropping everything


MaxStartups 10:20:30
MaxAuthTries 10
MaxSessions 30
----------------------------

##########################################
###           install fail2ban         ###
##########################################

dnf install fail2ban
apt install fail2ban

systemctl enable --now fail2ban.service

vim /etc/fail2ban/jail.d/ssh.local

systemctl restart fail2ban.service

to check it 
fail2ban-client banned
unban it with this
fail2ban-client unban 192.168.56.1
-------------

##########################################
###         password less login      #####
##########################################

On your own system (not the server) run this 

if linux
create a new key 
ssh-keygen â€“t rsa -b 4096

if windows 
ssh-keygen -b 4096

let it save or change path
give it a password

keys are created now you have to copy them to the server


for linux ssh-copy-id farzin@192.168.56.104
enter your password



for windows
use scp
scp $env:USERPROFILE/.ssh/id_rsa.pub farzin@192.168.56.104:~.ssh/authorized_keys



on the server
open sshd_config file
change these

PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no

restart sshd service and try it in another terminal
-------------------------------------------
####################################################
###              disabling weak keys             ###
####################################################

open /etc/ssh/ssh_config

in line 26
or search for ciphers or jusr write it in the end of the file

Ciphers aes256-cbc,aes256-ctr
KexAlgorithms ecdh-sha2-nistp521,ecdh-sha2-nistp384

### for KexAlgorithm choose one of them not both of these

for redhat 8 and newer it wont change they created a new policy that works better

cd /lib/systemd/system
vim sshd.service

EnvironmentFile= la blah blah

if you had $crypto remove it you will be ok it will be in the line with $options


restart ssh service with the following command
systemctl restart sshd


to check what is working on this server
ssh -Q cipher
ssh -Q key
ssh -Q kex

--------------------------
###########################################################
###              ACCESS CONTROL FOR SSH                 ###
###########################################################

open /etc/ssh/sshd.conf

you can use the file to only allow these people
add this in the end of the file you can use the following directives

AllowUsers
DenyUsers

DenyGroup
AllowGroup

write it like this
AllowUsers
using this means everyone is denied but these guys

DenyUsers
everyone is allowed but these guys


DenyUsers hacker root alex john

use space to separate them


#### for debian bases this still exists but not for redhat bases
use a daemon for white list and other stuff as tcp wrap

first change the host.allow add your self then host.deny


vim /etc/host.allow
SSHD: 192.168.9.7

vim /etc/host.deny
SSHD: ALL



if you check with client even when they have the key
it will ask that password
pass1
